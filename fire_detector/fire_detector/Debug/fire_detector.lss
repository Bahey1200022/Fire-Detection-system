
fire_detector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000764  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d90  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000766  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051d  00000000  00000000  00001d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00002284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000620  00000000  00000000  0000274e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002d6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_4>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  78:	0c 94 b0 03 	jmp	0x760	; 0x760 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <LCD_cmd>:

//*****sending command on LCD******//

void LCD_cmd(unsigned char cmd)
{
	LCD_DATA = cmd; // data lines are set to send command
  80:	85 b9       	out	0x05, r24	; 5
	
	PORTD &= ~(1 << rs); // RS sets 0, for command data
  82:	8b b1       	in	r24, 0x0b	; 11
  84:	8f 7d       	andi	r24, 0xDF	; 223
  86:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << rw); // RW sets 0, to write data
  88:	8b b1       	in	r24, 0x0b	; 11
  8a:	8f 7b       	andi	r24, 0xBF	; 191
  8c:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << en); // make enable from high to low
  8e:	8b b1       	in	r24, 0x0b	; 11
  90:	80 68       	ori	r24, 0x80	; 128
  92:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	87 ea       	ldi	r24, 0xA7	; 167
  96:	91 e6       	ldi	r25, 0x61	; 97
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <LCD_cmd+0x18>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <LCD_cmd+0x1e>
  9e:	00 00       	nop
	
	_delay_ms(100);
	PORTD &= ~(1 << en); // make enable low
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	8f 77       	andi	r24, 0x7F	; 127
  a4:	8b b9       	out	0x0b, r24	; 11
  a6:	08 95       	ret

000000a8 <init_LCD>:
	}
}

void init_LCD(void)
{
	LCD_cmd(0x38); // initialization in 8bit mode of 16X2 LCD
  a8:	88 e3       	ldi	r24, 0x38	; 56
  aa:	0e 94 40 00 	call	0x80	; 0x80 <LCD_cmd>
  ae:	89 ef       	ldi	r24, 0xF9	; 249
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <init_LCD+0xa>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <init_LCD+0x10>
  b8:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x01); // make clear LCD
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 40 00 	call	0x80	; 0x80 <LCD_cmd>
  c0:	89 ef       	ldi	r24, 0xF9	; 249
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <init_LCD+0x1c>
  c8:	00 c0       	rjmp	.+0      	; 0xca <init_LCD+0x22>
  ca:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x02); // return home
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	0e 94 40 00 	call	0x80	; 0x80 <LCD_cmd>
  d2:	89 ef       	ldi	r24, 0xF9	; 249
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <init_LCD+0x2e>
  da:	00 c0       	rjmp	.+0      	; 0xdc <init_LCD+0x34>
  dc:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x06); // make increment in cursor
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	0e 94 40 00 	call	0x80	; 0x80 <LCD_cmd>
  e4:	89 ef       	ldi	r24, 0xF9	; 249
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <init_LCD+0x40>
  ec:	00 c0       	rjmp	.+0      	; 0xee <init_LCD+0x46>
  ee:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x80); // "8" go to first line and "0" is for 0th position
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	0e 94 40 00 	call	0x80	; 0x80 <LCD_cmd>
  f6:	89 ef       	ldi	r24, 0xF9	; 249
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <init_LCD+0x52>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <init_LCD+0x58>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <LCD_write>:

//******write data on LCD******//

void LCD_write(unsigned char data)
{
	LCD_DATA = data; // data lines are set to send command
 104:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << rs); // RS sets 1, for command data
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << rw); // RW sets 0, to write data
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	8f 7b       	andi	r24, 0xBF	; 191
 110:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << en); // make enable from high to low
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	80 68       	ori	r24, 0x80	; 128
 116:	8b b9       	out	0x0b, r24	; 11
 118:	83 ef       	ldi	r24, 0xF3	; 243
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_write+0x18>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_write+0x1e>
 122:	00 00       	nop

	_delay_ms(2);
	PORTD &= ~(1 << en); // make enable low
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	8f 77       	andi	r24, 0x7F	; 127
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	08 95       	ret

0000012c <__vector_4>:
void LCD_cmd(unsigned char cmd);
void init_LCD(void);
void LCD_write(unsigned char data);
void Cursor_pos(unsigned char x_pos, unsigned char y_pos);

ISR(PCINT1_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	2f 93       	push	r18
 138:	3f 93       	push	r19
 13a:	4f 93       	push	r20
 13c:	5f 93       	push	r21
 13e:	6f 93       	push	r22
 140:	7f 93       	push	r23
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	af 93       	push	r26
 148:	bf 93       	push	r27
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
	while( PINC & (1<<PINC5) )
 14e:	21 c0       	rjmp	.+66     	; 0x192 <__vector_4+0x66>
	{
		PIND &= ~(1<<PIND3);
 150:	89 b1       	in	r24, 0x09	; 9
 152:	87 7f       	andi	r24, 0xF7	; 247
 154:	89 b9       	out	0x09, r24	; 9
		LCD_cmd(0x01); // clear
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 40 00 	call	0x80	; 0x80 <LCD_cmd>
		LCD_write('R');
 15c:	82 e5       	ldi	r24, 0x52	; 82
 15e:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
		LCD_write('E');
 162:	85 e4       	ldi	r24, 0x45	; 69
 164:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
		LCD_write('S');
 168:	83 e5       	ldi	r24, 0x53	; 83
 16a:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
		LCD_write('E');
 16e:	85 e4       	ldi	r24, 0x45	; 69
 170:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
		LCD_write('T');
 174:	84 e5       	ldi	r24, 0x54	; 84
 176:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
 17a:	2f e9       	ldi	r18, 0x9F	; 159
 17c:	86 e8       	ldi	r24, 0x86	; 134
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <__vector_4+0x54>
 188:	00 c0       	rjmp	.+0      	; 0x18a <__vector_4+0x5e>
 18a:	00 00       	nop
		_delay_ms(500);
		LCD_cmd(0x01); // clear
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 40 00 	call	0x80	; 0x80 <LCD_cmd>
void init_LCD(void);
void LCD_write(unsigned char data);
void Cursor_pos(unsigned char x_pos, unsigned char y_pos);

ISR(PCINT1_vect){
	while( PINC & (1<<PINC5) )
 192:	35 99       	sbic	0x06, 5	; 6
 194:	dd cf       	rjmp	.-70     	; 0x150 <__vector_4+0x24>
		LCD_write('T');
		_delay_ms(500);
		LCD_cmd(0x01); // clear
	}
	
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	bf 91       	pop	r27
 19c:	af 91       	pop	r26
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	7f 91       	pop	r23
 1a4:	6f 91       	pop	r22
 1a6:	5f 91       	pop	r21
 1a8:	4f 91       	pop	r20
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <Cursor_pos>:


void Cursor_pos(unsigned char x_pos, unsigned char y_pos) //x awel aw tani row (0->1) el y column (0->15)
{
	uint8_t the_address=0;
	if (x_pos==0)
 1b8:	88 23       	and	r24, r24
 1ba:	21 f0       	breq	.+8      	; 0x1c4 <Cursor_pos+0xc>
	the_address=0x80;
	else if(x_pos==1)
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	21 f0       	breq	.+8      	; 0x1c8 <Cursor_pos+0x10>



void Cursor_pos(unsigned char x_pos, unsigned char y_pos) //x awel aw tani row (0->1) el y column (0->15)
{
	uint8_t the_address=0;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <Cursor_pos+0x12>
	if (x_pos==0)
	the_address=0x80;
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <Cursor_pos+0x12>
	else if(x_pos==1)
	the_address=0xC0;
 1c8:	80 ec       	ldi	r24, 0xC0	; 192
	if(y_pos<16)
 1ca:	60 31       	cpi	r22, 0x10	; 16
 1cc:	08 f4       	brcc	.+2      	; 0x1d0 <Cursor_pos+0x18>
	the_address+=y_pos;
 1ce:	86 0f       	add	r24, r22
	LCD_cmd(the_address);
 1d0:	0e 94 40 00 	call	0x80	; 0x80 <LCD_cmd>
 1d4:	08 95       	ret

000001d6 <main>:
}



int main(void)
{
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	00 d0       	rcall	.+0      	; 0x1dc <main+0x6>
 1dc:	00 d0       	rcall	.+0      	; 0x1de <main+0x8>
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF; // set LCD data port as output
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	84 b9       	out	0x04, r24	; 4
	
	DDRD = 0b11101000;// set LCD signals (RS, RW, E) as output - buzzer pin pd3
 1e6:	88 ee       	ldi	r24, 0xE8	; 232
 1e8:	8a b9       	out	0x0a, r24	; 10
	
	PORTD |=(1<<PORTD0); //d0 input for smoke detector
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	8b b9       	out	0x0b, r24	; 11
	///////////////////////////////////////////////////////
	DDRC |=(1<<PINC5);  //interrupt setup pcint13
 1f0:	87 b1       	in	r24, 0x07	; 7
 1f2:	80 62       	ori	r24, 0x20	; 32
 1f4:	87 b9       	out	0x07, r24	; 7
	
	PORTC |=(1<<PINC5);// interrupt pc5
 1f6:	88 b1       	in	r24, 0x08	; 8
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	88 b9       	out	0x08, r24	; 8
	
	PCMSK1 |=(1<<PCINT13);
 1fc:	ec e6       	ldi	r30, 0x6C	; 108
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	80 62       	ori	r24, 0x20	; 32
 204:	80 83       	st	Z, r24
	PCICR |=(1<<PCIE1);
 206:	e8 e6       	ldi	r30, 0x68	; 104
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	80 83       	st	Z, r24
	
	sei();
 210:	78 94       	sei
	
	
	/////////////////////////////////////////////////
	init_LCD(); // initialize LCD
 212:	0e 94 54 00 	call	0xa8	; 0xa8 <init_LCD>
 216:	83 ec       	ldi	r24, 0xC3	; 195
 218:	99 e0       	ldi	r25, 0x09	; 9
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0x44>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x4a>
 220:	00 00       	nop
	_delay_ms(10); // delay of 100 Milli seconds

	LCD_cmd(0x0C); // display on, cursor off
 222:	8c e0       	ldi	r24, 0x0C	; 12
 224:	0e 94 40 00 	call	0x80	; 0x80 <LCD_cmd>
 228:	83 ec       	ldi	r24, 0xC3	; 195
 22a:	99 e0       	ldi	r25, 0x09	; 9
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x56>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x5c>
 232:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0x01); // clear
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 40 00 	call	0x80	; 0x80 <LCD_cmd>

	unsigned char ch[4]={' '};
 23a:	19 82       	std	Y+1, r1	; 0x01
 23c:	1a 82       	std	Y+2, r1	; 0x02
 23e:	1b 82       	std	Y+3, r1	; 0x03
 240:	1c 82       	std	Y+4, r1	; 0x04
 242:	80 e2       	ldi	r24, 0x20	; 32
 244:	89 83       	std	Y+1, r24	; 0x01
	unsigned int tempVolt=0;
	while (1)
	{
		LCD_cmd(0x01);
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 40 00 	call	0x80	; 0x80 <LCD_cmd>
		
		ADMUX = 0b01100011 ;
 24c:	83 e6       	ldi	r24, 0x63	; 99
 24e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		ADCSRA = 0b10000011; ///pin3
 252:	83 e8       	ldi	r24, 0x83	; 131
 254:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		for (int j =0;j<4;j++){
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	09 c0       	rjmp	.+18     	; 0x270 <main+0x9a>
			ch[j]=' ';///////////CLEARING CHAR ARRAY
 25e:	e1 e0       	ldi	r30, 0x01	; 1
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ec 0f       	add	r30, r28
 264:	fd 1f       	adc	r31, r29
 266:	e8 0f       	add	r30, r24
 268:	f9 1f       	adc	r31, r25
 26a:	20 e2       	ldi	r18, 0x20	; 32
 26c:	20 83       	st	Z, r18
	{
		LCD_cmd(0x01);
		
		ADMUX = 0b01100011 ;
		ADCSRA = 0b10000011; ///pin3
		for (int j =0;j<4;j++){
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	84 30       	cpi	r24, 0x04	; 4
 272:	91 05       	cpc	r25, r1
 274:	a4 f3       	brlt	.-24     	; 0x25e <main+0x88>
			ch[j]=' ';///////////CLEARING CHAR ARRAY
		}
		////////////WRITING
		Cursor_pos(0,7);
 276:	67 e0       	ldi	r22, 0x07	; 7
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Cursor_pos>
		ADCSRA |= (1 << ADSC);					// start ADC conversion
 27e:	ea e7       	ldi	r30, 0x7A	; 122
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	80 64       	ori	r24, 0x40	; 64
 286:	80 83       	st	Z, r24
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
 288:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 28c:	86 fd       	sbrc	r24, 6
 28e:	fc cf       	rjmp	.-8      	; 0x288 <main+0xb2>
		tempVolt = ADCH;
 290:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		int temp = (int)((float)tempVolt / 255.0 * 500);
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 75 02 	call	0x4ea	; 0x4ea <__floatunsisf>
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	4f e7       	ldi	r20, 0x7F	; 127
 2a4:	53 e4       	ldi	r21, 0x43	; 67
 2a6:	0e 94 cd 01 	call	0x39a	; 0x39a <__divsf3>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	4a ef       	ldi	r20, 0xFA	; 250
 2b0:	53 e4       	ldi	r21, 0x43	; 67
 2b2:	0e 94 03 03 	call	0x606	; 0x606 <__mulsf3>
 2b6:	0e 94 3f 02 	call	0x47e	; 0x47e <__fixsfsi>
 2ba:	dc 01       	movw	r26, r24
 2bc:	cb 01       	movw	r24, r22
 2be:	7c 01       	movw	r14, r24
		itoa(temp,ch,10);  ////convert int to string
 2c0:	4a e0       	ldi	r20, 0x0A	; 10
 2c2:	50 e0       	ldi	r21, 0x00	; 0
 2c4:	be 01       	movw	r22, r28
 2c6:	6f 5f       	subi	r22, 0xFF	; 255
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ca:	0e 94 70 03 	call	0x6e0	; 0x6e0 <itoa>

		for (int j=0;j<4;j++){
 2ce:	00 e0       	ldi	r16, 0x00	; 0
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	13 c0       	rjmp	.+38     	; 0x2fa <main+0x124>
			if (ch[j]<'0'||ch[j]>'9')
 2d4:	e1 e0       	ldi	r30, 0x01	; 1
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	ec 0f       	add	r30, r28
 2da:	fd 1f       	adc	r31, r29
 2dc:	e0 0f       	add	r30, r16
 2de:	f1 1f       	adc	r31, r17
 2e0:	80 81       	ld	r24, Z
 2e2:	90 ed       	ldi	r25, 0xD0	; 208
 2e4:	98 0f       	add	r25, r24
 2e6:	9a 30       	cpi	r25, 0x0A	; 10
 2e8:	20 f0       	brcs	.+8      	; 0x2f2 <main+0x11c>
			LCD_write(' ');
 2ea:	80 e2       	ldi	r24, 0x20	; 32
 2ec:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <main+0x120>
			else
			LCD_write(ch[j]);
 2f2:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
		while(BIT_IS_SET(ADCSRA, ADSC)) {}
		tempVolt = ADCH;
		int temp = (int)((float)tempVolt / 255.0 * 500);
		itoa(temp,ch,10);  ////convert int to string

		for (int j=0;j<4;j++){
 2f6:	0f 5f       	subi	r16, 0xFF	; 255
 2f8:	1f 4f       	sbci	r17, 0xFF	; 255
 2fa:	04 30       	cpi	r16, 0x04	; 4
 2fc:	11 05       	cpc	r17, r1
 2fe:	54 f3       	brlt	.-44     	; 0x2d4 <main+0xfe>
 300:	9f e9       	ldi	r25, 0x9F	; 159
 302:	26 e8       	ldi	r18, 0x86	; 134
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	91 50       	subi	r25, 0x01	; 1
 308:	20 40       	sbci	r18, 0x00	; 0
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x130>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x13a>
 310:	00 00       	nop
			else
			LCD_write(ch[j]);
		}
		_delay_ms(500);
		
		if(temp>50 ){
 312:	93 e3       	ldi	r25, 0x33	; 51
 314:	e9 16       	cp	r14, r25
 316:	f1 04       	cpc	r15, r1
 318:	dc f0       	brlt	.+54     	; 0x350 <main+0x17a>
			LCD_write('H');
 31a:	88 e4       	ldi	r24, 0x48	; 72
 31c:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
			LCD_write('E');
 320:	85 e4       	ldi	r24, 0x45	; 69
 322:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
			LCD_write('A');
 326:	81 e4       	ldi	r24, 0x41	; 65
 328:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
			LCD_write('T');
 32c:	84 e5       	ldi	r24, 0x54	; 84
 32e:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>

			PIND |=(1<<PIND3);
 332:	89 b1       	in	r24, 0x09	; 9
 334:	88 60       	ori	r24, 0x08	; 8
 336:	89 b9       	out	0x09, r24	; 9
 338:	2f e5       	ldi	r18, 0x5F	; 95
 33a:	8a ee       	ldi	r24, 0xEA	; 234
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <main+0x168>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x172>
 348:	00 00       	nop
			_delay_ms(300);
			PIND &= ~(1<<PIND3);
 34a:	89 b1       	in	r24, 0x09	; 9
 34c:	87 7f       	andi	r24, 0xF7	; 247
 34e:	89 b9       	out	0x09, r24	; 9
		}
		if (PIND & (1<<PIND0)) {
 350:	48 9b       	sbis	0x09, 0	; 9
 352:	1c c0       	rjmp	.+56     	; 0x38c <main+0x1b6>
			Cursor_pos(1,7);
 354:	67 e0       	ldi	r22, 0x07	; 7
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Cursor_pos>

			LCD_write('S');
 35c:	83 e5       	ldi	r24, 0x53	; 83
 35e:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
			LCD_write('M');
 362:	8d e4       	ldi	r24, 0x4D	; 77
 364:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
			LCD_write('O');
 368:	8f e4       	ldi	r24, 0x4F	; 79
 36a:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
			LCD_write('K');
 36e:	8b e4       	ldi	r24, 0x4B	; 75
 370:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
			LCD_write('E');
 374:	85 e4       	ldi	r24, 0x45	; 69
 376:	0e 94 82 00 	call	0x104	; 0x104 <LCD_write>
 37a:	2f e5       	ldi	r18, 0x5F	; 95
 37c:	8a ee       	ldi	r24, 0xEA	; 234
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	21 50       	subi	r18, 0x01	; 1
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <main+0x1aa>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x1b4>
 38a:	00 00       	nop
			_delay_ms(300);

		}
		
		PIND &= ~(1<<PIND3);
 38c:	89 b1       	in	r24, 0x09	; 9
 38e:	87 7f       	andi	r24, 0xF7	; 247
 390:	89 b9       	out	0x09, r24	; 9
		LCD_cmd(0x01); // clear
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 40 00 	call	0x80	; 0x80 <LCD_cmd>


	}
 398:	56 cf       	rjmp	.-340    	; 0x246 <main+0x70>

0000039a <__divsf3>:
 39a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__divsf3x>
 39e:	0c 94 c9 02 	jmp	0x592	; 0x592 <__fp_round>
 3a2:	0e 94 c2 02 	call	0x584	; 0x584 <__fp_pscB>
 3a6:	58 f0       	brcs	.+22     	; 0x3be <__divsf3+0x24>
 3a8:	0e 94 bb 02 	call	0x576	; 0x576 <__fp_pscA>
 3ac:	40 f0       	brcs	.+16     	; 0x3be <__divsf3+0x24>
 3ae:	29 f4       	brne	.+10     	; 0x3ba <__divsf3+0x20>
 3b0:	5f 3f       	cpi	r21, 0xFF	; 255
 3b2:	29 f0       	breq	.+10     	; 0x3be <__divsf3+0x24>
 3b4:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_inf>
 3b8:	51 11       	cpse	r21, r1
 3ba:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_szero>
 3be:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_nan>

000003c2 <__divsf3x>:
 3c2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fp_split3>
 3c6:	68 f3       	brcs	.-38     	; 0x3a2 <__divsf3+0x8>

000003c8 <__divsf3_pse>:
 3c8:	99 23       	and	r25, r25
 3ca:	b1 f3       	breq	.-20     	; 0x3b8 <__divsf3+0x1e>
 3cc:	55 23       	and	r21, r21
 3ce:	91 f3       	breq	.-28     	; 0x3b4 <__divsf3+0x1a>
 3d0:	95 1b       	sub	r25, r21
 3d2:	55 0b       	sbc	r21, r21
 3d4:	bb 27       	eor	r27, r27
 3d6:	aa 27       	eor	r26, r26
 3d8:	62 17       	cp	r22, r18
 3da:	73 07       	cpc	r23, r19
 3dc:	84 07       	cpc	r24, r20
 3de:	38 f0       	brcs	.+14     	; 0x3ee <__divsf3_pse+0x26>
 3e0:	9f 5f       	subi	r25, 0xFF	; 255
 3e2:	5f 4f       	sbci	r21, 0xFF	; 255
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	44 1f       	adc	r20, r20
 3ea:	aa 1f       	adc	r26, r26
 3ec:	a9 f3       	breq	.-22     	; 0x3d8 <__divsf3_pse+0x10>
 3ee:	35 d0       	rcall	.+106    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 3f0:	0e 2e       	mov	r0, r30
 3f2:	3a f0       	brmi	.+14     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f4:	e0 e8       	ldi	r30, 0x80	; 128
 3f6:	32 d0       	rcall	.+100    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 3f8:	91 50       	subi	r25, 0x01	; 1
 3fa:	50 40       	sbci	r21, 0x00	; 0
 3fc:	e6 95       	lsr	r30
 3fe:	00 1c       	adc	r0, r0
 400:	ca f7       	brpl	.-14     	; 0x3f4 <__divsf3_pse+0x2c>
 402:	2b d0       	rcall	.+86     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 404:	fe 2f       	mov	r31, r30
 406:	29 d0       	rcall	.+82     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	88 1f       	adc	r24, r24
 40e:	bb 1f       	adc	r27, r27
 410:	26 17       	cp	r18, r22
 412:	37 07       	cpc	r19, r23
 414:	48 07       	cpc	r20, r24
 416:	ab 07       	cpc	r26, r27
 418:	b0 e8       	ldi	r27, 0x80	; 128
 41a:	09 f0       	breq	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41c:	bb 0b       	sbc	r27, r27
 41e:	80 2d       	mov	r24, r0
 420:	bf 01       	movw	r22, r30
 422:	ff 27       	eor	r31, r31
 424:	93 58       	subi	r25, 0x83	; 131
 426:	5f 4f       	sbci	r21, 0xFF	; 255
 428:	3a f0       	brmi	.+14     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 42a:	9e 3f       	cpi	r25, 0xFE	; 254
 42c:	51 05       	cpc	r21, r1
 42e:	78 f0       	brcs	.+30     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 430:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_inf>
 434:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_szero>
 438:	5f 3f       	cpi	r21, 0xFF	; 255
 43a:	e4 f3       	brlt	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	98 3e       	cpi	r25, 0xE8	; 232
 43e:	d4 f3       	brlt	.-12     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 440:	86 95       	lsr	r24
 442:	77 95       	ror	r23
 444:	67 95       	ror	r22
 446:	b7 95       	ror	r27
 448:	f7 95       	ror	r31
 44a:	9f 5f       	subi	r25, 0xFF	; 255
 44c:	c9 f7       	brne	.-14     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 44e:	88 0f       	add	r24, r24
 450:	91 1d       	adc	r25, r1
 452:	96 95       	lsr	r25
 454:	87 95       	ror	r24
 456:	97 f9       	bld	r25, 7
 458:	08 95       	ret
 45a:	e1 e0       	ldi	r30, 0x01	; 1
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	88 1f       	adc	r24, r24
 462:	bb 1f       	adc	r27, r27
 464:	62 17       	cp	r22, r18
 466:	73 07       	cpc	r23, r19
 468:	84 07       	cpc	r24, r20
 46a:	ba 07       	cpc	r27, r26
 46c:	20 f0       	brcs	.+8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 46e:	62 1b       	sub	r22, r18
 470:	73 0b       	sbc	r23, r19
 472:	84 0b       	sbc	r24, r20
 474:	ba 0b       	sbc	r27, r26
 476:	ee 1f       	adc	r30, r30
 478:	88 f7       	brcc	.-30     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 47a:	e0 95       	com	r30
 47c:	08 95       	ret

0000047e <__fixsfsi>:
 47e:	0e 94 46 02 	call	0x48c	; 0x48c <__fixunssfsi>
 482:	68 94       	set
 484:	b1 11       	cpse	r27, r1
 486:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_szero>
 48a:	08 95       	ret

0000048c <__fixunssfsi>:
 48c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__fp_splitA>
 490:	88 f0       	brcs	.+34     	; 0x4b4 <__fixunssfsi+0x28>
 492:	9f 57       	subi	r25, 0x7F	; 127
 494:	98 f0       	brcs	.+38     	; 0x4bc <__fixunssfsi+0x30>
 496:	b9 2f       	mov	r27, r25
 498:	99 27       	eor	r25, r25
 49a:	b7 51       	subi	r27, 0x17	; 23
 49c:	b0 f0       	brcs	.+44     	; 0x4ca <__fixunssfsi+0x3e>
 49e:	e1 f0       	breq	.+56     	; 0x4d8 <__fixunssfsi+0x4c>
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	88 1f       	adc	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	1a f0       	brmi	.+6      	; 0x4b0 <__fixunssfsi+0x24>
 4aa:	ba 95       	dec	r27
 4ac:	c9 f7       	brne	.-14     	; 0x4a0 <__fixunssfsi+0x14>
 4ae:	14 c0       	rjmp	.+40     	; 0x4d8 <__fixunssfsi+0x4c>
 4b0:	b1 30       	cpi	r27, 0x01	; 1
 4b2:	91 f0       	breq	.+36     	; 0x4d8 <__fixunssfsi+0x4c>
 4b4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__fp_zero>
 4b8:	b1 e0       	ldi	r27, 0x01	; 1
 4ba:	08 95       	ret
 4bc:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_zero>
 4c0:	67 2f       	mov	r22, r23
 4c2:	78 2f       	mov	r23, r24
 4c4:	88 27       	eor	r24, r24
 4c6:	b8 5f       	subi	r27, 0xF8	; 248
 4c8:	39 f0       	breq	.+14     	; 0x4d8 <__fixunssfsi+0x4c>
 4ca:	b9 3f       	cpi	r27, 0xF9	; 249
 4cc:	cc f3       	brlt	.-14     	; 0x4c0 <__fixunssfsi+0x34>
 4ce:	86 95       	lsr	r24
 4d0:	77 95       	ror	r23
 4d2:	67 95       	ror	r22
 4d4:	b3 95       	inc	r27
 4d6:	d9 f7       	brne	.-10     	; 0x4ce <__fixunssfsi+0x42>
 4d8:	3e f4       	brtc	.+14     	; 0x4e8 <__fixunssfsi+0x5c>
 4da:	90 95       	com	r25
 4dc:	80 95       	com	r24
 4de:	70 95       	com	r23
 4e0:	61 95       	neg	r22
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	8f 4f       	sbci	r24, 0xFF	; 255
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
 4e8:	08 95       	ret

000004ea <__floatunsisf>:
 4ea:	e8 94       	clt
 4ec:	09 c0       	rjmp	.+18     	; 0x500 <__floatsisf+0x12>

000004ee <__floatsisf>:
 4ee:	97 fb       	bst	r25, 7
 4f0:	3e f4       	brtc	.+14     	; 0x500 <__floatsisf+0x12>
 4f2:	90 95       	com	r25
 4f4:	80 95       	com	r24
 4f6:	70 95       	com	r23
 4f8:	61 95       	neg	r22
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	8f 4f       	sbci	r24, 0xFF	; 255
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	99 23       	and	r25, r25
 502:	a9 f0       	breq	.+42     	; 0x52e <__floatsisf+0x40>
 504:	f9 2f       	mov	r31, r25
 506:	96 e9       	ldi	r25, 0x96	; 150
 508:	bb 27       	eor	r27, r27
 50a:	93 95       	inc	r25
 50c:	f6 95       	lsr	r31
 50e:	87 95       	ror	r24
 510:	77 95       	ror	r23
 512:	67 95       	ror	r22
 514:	b7 95       	ror	r27
 516:	f1 11       	cpse	r31, r1
 518:	f8 cf       	rjmp	.-16     	; 0x50a <__floatsisf+0x1c>
 51a:	fa f4       	brpl	.+62     	; 0x55a <__floatsisf+0x6c>
 51c:	bb 0f       	add	r27, r27
 51e:	11 f4       	brne	.+4      	; 0x524 <__floatsisf+0x36>
 520:	60 ff       	sbrs	r22, 0
 522:	1b c0       	rjmp	.+54     	; 0x55a <__floatsisf+0x6c>
 524:	6f 5f       	subi	r22, 0xFF	; 255
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	8f 4f       	sbci	r24, 0xFF	; 255
 52a:	9f 4f       	sbci	r25, 0xFF	; 255
 52c:	16 c0       	rjmp	.+44     	; 0x55a <__floatsisf+0x6c>
 52e:	88 23       	and	r24, r24
 530:	11 f0       	breq	.+4      	; 0x536 <__floatsisf+0x48>
 532:	96 e9       	ldi	r25, 0x96	; 150
 534:	11 c0       	rjmp	.+34     	; 0x558 <__floatsisf+0x6a>
 536:	77 23       	and	r23, r23
 538:	21 f0       	breq	.+8      	; 0x542 <__floatsisf+0x54>
 53a:	9e e8       	ldi	r25, 0x8E	; 142
 53c:	87 2f       	mov	r24, r23
 53e:	76 2f       	mov	r23, r22
 540:	05 c0       	rjmp	.+10     	; 0x54c <__floatsisf+0x5e>
 542:	66 23       	and	r22, r22
 544:	71 f0       	breq	.+28     	; 0x562 <__floatsisf+0x74>
 546:	96 e8       	ldi	r25, 0x86	; 134
 548:	86 2f       	mov	r24, r22
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	2a f0       	brmi	.+10     	; 0x55a <__floatsisf+0x6c>
 550:	9a 95       	dec	r25
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	da f7       	brpl	.-10     	; 0x550 <__floatsisf+0x62>
 55a:	88 0f       	add	r24, r24
 55c:	96 95       	lsr	r25
 55e:	87 95       	ror	r24
 560:	97 f9       	bld	r25, 7
 562:	08 95       	ret

00000564 <__fp_inf>:
 564:	97 f9       	bld	r25, 7
 566:	9f 67       	ori	r25, 0x7F	; 127
 568:	80 e8       	ldi	r24, 0x80	; 128
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	08 95       	ret

00000570 <__fp_nan>:
 570:	9f ef       	ldi	r25, 0xFF	; 255
 572:	80 ec       	ldi	r24, 0xC0	; 192
 574:	08 95       	ret

00000576 <__fp_pscA>:
 576:	00 24       	eor	r0, r0
 578:	0a 94       	dec	r0
 57a:	16 16       	cp	r1, r22
 57c:	17 06       	cpc	r1, r23
 57e:	18 06       	cpc	r1, r24
 580:	09 06       	cpc	r0, r25
 582:	08 95       	ret

00000584 <__fp_pscB>:
 584:	00 24       	eor	r0, r0
 586:	0a 94       	dec	r0
 588:	12 16       	cp	r1, r18
 58a:	13 06       	cpc	r1, r19
 58c:	14 06       	cpc	r1, r20
 58e:	05 06       	cpc	r0, r21
 590:	08 95       	ret

00000592 <__fp_round>:
 592:	09 2e       	mov	r0, r25
 594:	03 94       	inc	r0
 596:	00 0c       	add	r0, r0
 598:	11 f4       	brne	.+4      	; 0x59e <__fp_round+0xc>
 59a:	88 23       	and	r24, r24
 59c:	52 f0       	brmi	.+20     	; 0x5b2 <__fp_round+0x20>
 59e:	bb 0f       	add	r27, r27
 5a0:	40 f4       	brcc	.+16     	; 0x5b2 <__fp_round+0x20>
 5a2:	bf 2b       	or	r27, r31
 5a4:	11 f4       	brne	.+4      	; 0x5aa <__fp_round+0x18>
 5a6:	60 ff       	sbrs	r22, 0
 5a8:	04 c0       	rjmp	.+8      	; 0x5b2 <__fp_round+0x20>
 5aa:	6f 5f       	subi	r22, 0xFF	; 255
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	8f 4f       	sbci	r24, 0xFF	; 255
 5b0:	9f 4f       	sbci	r25, 0xFF	; 255
 5b2:	08 95       	ret

000005b4 <__fp_split3>:
 5b4:	57 fd       	sbrc	r21, 7
 5b6:	90 58       	subi	r25, 0x80	; 128
 5b8:	44 0f       	add	r20, r20
 5ba:	55 1f       	adc	r21, r21
 5bc:	59 f0       	breq	.+22     	; 0x5d4 <__fp_splitA+0x10>
 5be:	5f 3f       	cpi	r21, 0xFF	; 255
 5c0:	71 f0       	breq	.+28     	; 0x5de <__fp_splitA+0x1a>
 5c2:	47 95       	ror	r20

000005c4 <__fp_splitA>:
 5c4:	88 0f       	add	r24, r24
 5c6:	97 fb       	bst	r25, 7
 5c8:	99 1f       	adc	r25, r25
 5ca:	61 f0       	breq	.+24     	; 0x5e4 <__fp_splitA+0x20>
 5cc:	9f 3f       	cpi	r25, 0xFF	; 255
 5ce:	79 f0       	breq	.+30     	; 0x5ee <__fp_splitA+0x2a>
 5d0:	87 95       	ror	r24
 5d2:	08 95       	ret
 5d4:	12 16       	cp	r1, r18
 5d6:	13 06       	cpc	r1, r19
 5d8:	14 06       	cpc	r1, r20
 5da:	55 1f       	adc	r21, r21
 5dc:	f2 cf       	rjmp	.-28     	; 0x5c2 <__fp_split3+0xe>
 5de:	46 95       	lsr	r20
 5e0:	f1 df       	rcall	.-30     	; 0x5c4 <__fp_splitA>
 5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <__fp_splitA+0x30>
 5e4:	16 16       	cp	r1, r22
 5e6:	17 06       	cpc	r1, r23
 5e8:	18 06       	cpc	r1, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	f1 cf       	rjmp	.-30     	; 0x5d0 <__fp_splitA+0xc>
 5ee:	86 95       	lsr	r24
 5f0:	71 05       	cpc	r23, r1
 5f2:	61 05       	cpc	r22, r1
 5f4:	08 94       	sec
 5f6:	08 95       	ret

000005f8 <__fp_zero>:
 5f8:	e8 94       	clt

000005fa <__fp_szero>:
 5fa:	bb 27       	eor	r27, r27
 5fc:	66 27       	eor	r22, r22
 5fe:	77 27       	eor	r23, r23
 600:	cb 01       	movw	r24, r22
 602:	97 f9       	bld	r25, 7
 604:	08 95       	ret

00000606 <__mulsf3>:
 606:	0e 94 16 03 	call	0x62c	; 0x62c <__mulsf3x>
 60a:	0c 94 c9 02 	jmp	0x592	; 0x592 <__fp_round>
 60e:	0e 94 bb 02 	call	0x576	; 0x576 <__fp_pscA>
 612:	38 f0       	brcs	.+14     	; 0x622 <__mulsf3+0x1c>
 614:	0e 94 c2 02 	call	0x584	; 0x584 <__fp_pscB>
 618:	20 f0       	brcs	.+8      	; 0x622 <__mulsf3+0x1c>
 61a:	95 23       	and	r25, r21
 61c:	11 f0       	breq	.+4      	; 0x622 <__mulsf3+0x1c>
 61e:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_inf>
 622:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_nan>
 626:	11 24       	eor	r1, r1
 628:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_szero>

0000062c <__mulsf3x>:
 62c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fp_split3>
 630:	70 f3       	brcs	.-36     	; 0x60e <__mulsf3+0x8>

00000632 <__mulsf3_pse>:
 632:	95 9f       	mul	r25, r21
 634:	c1 f3       	breq	.-16     	; 0x626 <__mulsf3+0x20>
 636:	95 0f       	add	r25, r21
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	55 1f       	adc	r21, r21
 63c:	62 9f       	mul	r22, r18
 63e:	f0 01       	movw	r30, r0
 640:	72 9f       	mul	r23, r18
 642:	bb 27       	eor	r27, r27
 644:	f0 0d       	add	r31, r0
 646:	b1 1d       	adc	r27, r1
 648:	63 9f       	mul	r22, r19
 64a:	aa 27       	eor	r26, r26
 64c:	f0 0d       	add	r31, r0
 64e:	b1 1d       	adc	r27, r1
 650:	aa 1f       	adc	r26, r26
 652:	64 9f       	mul	r22, r20
 654:	66 27       	eor	r22, r22
 656:	b0 0d       	add	r27, r0
 658:	a1 1d       	adc	r26, r1
 65a:	66 1f       	adc	r22, r22
 65c:	82 9f       	mul	r24, r18
 65e:	22 27       	eor	r18, r18
 660:	b0 0d       	add	r27, r0
 662:	a1 1d       	adc	r26, r1
 664:	62 1f       	adc	r22, r18
 666:	73 9f       	mul	r23, r19
 668:	b0 0d       	add	r27, r0
 66a:	a1 1d       	adc	r26, r1
 66c:	62 1f       	adc	r22, r18
 66e:	83 9f       	mul	r24, r19
 670:	a0 0d       	add	r26, r0
 672:	61 1d       	adc	r22, r1
 674:	22 1f       	adc	r18, r18
 676:	74 9f       	mul	r23, r20
 678:	33 27       	eor	r19, r19
 67a:	a0 0d       	add	r26, r0
 67c:	61 1d       	adc	r22, r1
 67e:	23 1f       	adc	r18, r19
 680:	84 9f       	mul	r24, r20
 682:	60 0d       	add	r22, r0
 684:	21 1d       	adc	r18, r1
 686:	82 2f       	mov	r24, r18
 688:	76 2f       	mov	r23, r22
 68a:	6a 2f       	mov	r22, r26
 68c:	11 24       	eor	r1, r1
 68e:	9f 57       	subi	r25, 0x7F	; 127
 690:	50 40       	sbci	r21, 0x00	; 0
 692:	9a f0       	brmi	.+38     	; 0x6ba <__mulsf3_pse+0x88>
 694:	f1 f0       	breq	.+60     	; 0x6d2 <__mulsf3_pse+0xa0>
 696:	88 23       	and	r24, r24
 698:	4a f0       	brmi	.+18     	; 0x6ac <__mulsf3_pse+0x7a>
 69a:	ee 0f       	add	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	bb 1f       	adc	r27, r27
 6a0:	66 1f       	adc	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	88 1f       	adc	r24, r24
 6a6:	91 50       	subi	r25, 0x01	; 1
 6a8:	50 40       	sbci	r21, 0x00	; 0
 6aa:	a9 f7       	brne	.-22     	; 0x696 <__mulsf3_pse+0x64>
 6ac:	9e 3f       	cpi	r25, 0xFE	; 254
 6ae:	51 05       	cpc	r21, r1
 6b0:	80 f0       	brcs	.+32     	; 0x6d2 <__mulsf3_pse+0xa0>
 6b2:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_inf>
 6b6:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_szero>
 6ba:	5f 3f       	cpi	r21, 0xFF	; 255
 6bc:	e4 f3       	brlt	.-8      	; 0x6b6 <__mulsf3_pse+0x84>
 6be:	98 3e       	cpi	r25, 0xE8	; 232
 6c0:	d4 f3       	brlt	.-12     	; 0x6b6 <__mulsf3_pse+0x84>
 6c2:	86 95       	lsr	r24
 6c4:	77 95       	ror	r23
 6c6:	67 95       	ror	r22
 6c8:	b7 95       	ror	r27
 6ca:	f7 95       	ror	r31
 6cc:	e7 95       	ror	r30
 6ce:	9f 5f       	subi	r25, 0xFF	; 255
 6d0:	c1 f7       	brne	.-16     	; 0x6c2 <__mulsf3_pse+0x90>
 6d2:	fe 2b       	or	r31, r30
 6d4:	88 0f       	add	r24, r24
 6d6:	91 1d       	adc	r25, r1
 6d8:	96 95       	lsr	r25
 6da:	87 95       	ror	r24
 6dc:	97 f9       	bld	r25, 7
 6de:	08 95       	ret

000006e0 <itoa>:
 6e0:	45 32       	cpi	r20, 0x25	; 37
 6e2:	51 05       	cpc	r21, r1
 6e4:	20 f4       	brcc	.+8      	; 0x6ee <itoa+0xe>
 6e6:	42 30       	cpi	r20, 0x02	; 2
 6e8:	10 f0       	brcs	.+4      	; 0x6ee <itoa+0xe>
 6ea:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__itoa_ncheck>
 6ee:	fb 01       	movw	r30, r22
 6f0:	10 82       	st	Z, r1
 6f2:	cb 01       	movw	r24, r22
 6f4:	08 95       	ret

000006f6 <__itoa_ncheck>:
 6f6:	bb 27       	eor	r27, r27
 6f8:	4a 30       	cpi	r20, 0x0A	; 10
 6fa:	31 f4       	brne	.+12     	; 0x708 <__itoa_ncheck+0x12>
 6fc:	99 23       	and	r25, r25
 6fe:	22 f4       	brpl	.+8      	; 0x708 <__itoa_ncheck+0x12>
 700:	bd e2       	ldi	r27, 0x2D	; 45
 702:	90 95       	com	r25
 704:	81 95       	neg	r24
 706:	9f 4f       	sbci	r25, 0xFF	; 255
 708:	0c 94 87 03 	jmp	0x70e	; 0x70e <__utoa_common>

0000070c <__utoa_ncheck>:
 70c:	bb 27       	eor	r27, r27

0000070e <__utoa_common>:
 70e:	fb 01       	movw	r30, r22
 710:	55 27       	eor	r21, r21
 712:	aa 27       	eor	r26, r26
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	aa 1f       	adc	r26, r26
 71a:	a4 17       	cp	r26, r20
 71c:	10 f0       	brcs	.+4      	; 0x722 <__utoa_common+0x14>
 71e:	a4 1b       	sub	r26, r20
 720:	83 95       	inc	r24
 722:	50 51       	subi	r21, 0x10	; 16
 724:	b9 f7       	brne	.-18     	; 0x714 <__utoa_common+0x6>
 726:	a0 5d       	subi	r26, 0xD0	; 208
 728:	aa 33       	cpi	r26, 0x3A	; 58
 72a:	08 f0       	brcs	.+2      	; 0x72e <__utoa_common+0x20>
 72c:	a9 5d       	subi	r26, 0xD9	; 217
 72e:	a1 93       	st	Z+, r26
 730:	00 97       	sbiw	r24, 0x00	; 0
 732:	79 f7       	brne	.-34     	; 0x712 <__utoa_common+0x4>
 734:	b1 11       	cpse	r27, r1
 736:	b1 93       	st	Z+, r27
 738:	11 92       	st	Z+, r1
 73a:	cb 01       	movw	r24, r22
 73c:	0c 94 a0 03 	jmp	0x740	; 0x740 <strrev>

00000740 <strrev>:
 740:	dc 01       	movw	r26, r24
 742:	fc 01       	movw	r30, r24
 744:	67 2f       	mov	r22, r23
 746:	71 91       	ld	r23, Z+
 748:	77 23       	and	r23, r23
 74a:	e1 f7       	brne	.-8      	; 0x744 <strrev+0x4>
 74c:	32 97       	sbiw	r30, 0x02	; 2
 74e:	04 c0       	rjmp	.+8      	; 0x758 <strrev+0x18>
 750:	7c 91       	ld	r23, X
 752:	6d 93       	st	X+, r22
 754:	70 83       	st	Z, r23
 756:	62 91       	ld	r22, -Z
 758:	ae 17       	cp	r26, r30
 75a:	bf 07       	cpc	r27, r31
 75c:	c8 f3       	brcs	.-14     	; 0x750 <strrev+0x10>
 75e:	08 95       	ret

00000760 <_exit>:
 760:	f8 94       	cli

00000762 <__stop_program>:
 762:	ff cf       	rjmp	.-2      	; 0x762 <__stop_program>
